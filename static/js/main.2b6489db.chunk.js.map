{"version":3,"sources":["api/api.ts","components/LanguagesList/LanguagesList.tsx","components/CountriesList/CountriesList.tsx","components/ContinentList/ContinetsList.tsx","App.tsx","index.tsx"],"names":["client","ApolloClient","cache","InMemoryCache","uri","GET_ALL_CONTINENTS","gql","LanguagesList","props","language","name","CountriesList","country","languages","map","code","ContinentsList","continent","countries","App","useQuery","loading","error","data","message","continents","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"0QAOaA,EAAS,IAAIC,IAAa,CACrCC,MAAO,IAAIC,IACXC,IAAK,uCAKMC,EAAqBC,YAAH,yL,uBCRlBC,EAAiC,SAACC,GAC7C,IAAQC,EAAaD,EAAbC,SAER,OACE,6BACE,4BAAIA,EAASC,UCJNC,EAAiC,SAACH,GAC7C,IAAQI,EAAYJ,EAAZI,QAER,OACE,+BACE,4BAAIA,EAAQF,OACZ,6BACGE,EAAQC,UAAUC,KAAI,SAACL,GAAD,OACrB,cAAC,EAAD,CAAmCA,SAAUA,GAAzBA,EAASM,eCR1BC,EAAkC,SAACR,GAC9C,IAAQS,EAAcT,EAAdS,UAER,OACE,+BACE,4BAAIA,EAAUP,OAEd,6BACGO,EAAUC,UAAUJ,KAAI,SAACF,GAAD,OACvB,cAAC,EAAD,CAAkCA,QAASA,GAAvBA,EAAQG,eCTzBI,EAAgB,WAC3B,MAAiCC,YAASf,GAAlCgB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,OAAIF,GAAWC,EACN,4BAAIA,EAAQA,EAAME,QAAU,eAInC,gCACE,sEACA,6BACGD,EAAKE,WAAWX,KAAI,SAACG,GAAD,OACnB,cAAC,EAAD,CAAqCA,UAAWA,GAA3BA,EAAUF,e,MCZzCW,IAASC,OACP,cAACC,EAAA,EAAD,CAAgB5B,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEF6B,SAASC,eAAe,W","file":"static/js/main.2b6489db.chunk.js","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n} from '@apollo/client';\n\n// initialize a GraphQL endpoint\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com',\n});\n\n// write a Apollo Query\n\nexport const GET_ALL_CONTINENTS = gql`\nquery {\n  continents {\n    code\n    name\n    countries {\n      code\n      name\n      languages {\n        code\n        name\n      }\n    }\n  }\n}\n`;\n","import React from 'react';\n\ninterface Props {\n  language: Language;\n}\n\nexport const LanguagesList: React.FC<Props> = (props) => {\n  const { language } = props;\n\n  return (\n    <li>\n      <p>{language.name}</p>\n    </li>\n  );\n};\n","import React from 'react';\nimport { LanguagesList } from '../LanguagesList/LanguagesList';\n\ninterface Props {\n  country: Country\n}\n\nexport const CountriesList: React.FC<Props> = (props) => {\n  const { country } = props;\n\n  return (\n    <li>\n      <p>{country.name}</p>\n      <ul>\n        {country.languages.map((language: Language) => (\n          <LanguagesList key={language.code} language={language} />\n        ))}\n      </ul>\n    </li>\n  );\n};\n","import React from 'react';\nimport { CountriesList } from '../CountriesList/CountriesList';\n\ninterface Props {\n  continent: Continent\n}\n\nexport const ContinentsList: React.FC<Props> = (props) => {\n  const { continent } = props;\n\n  return (\n    <li>\n      <p>{continent.name}</p>\n\n      <ul>\n        {continent.countries.map((country: Country) => (\n          <CountriesList key={country.code} country={country} />\n        ))}\n      </ul>\n    </li>\n  );\n};\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_CONTINENTS } from './api/api';\nimport './App.scss';\n\nimport { ContinentsList } from './components/ContinentList/ContinetsList';\n\nexport const App: React.FC = () => {\n  const { loading, error, data } = useQuery(GET_ALL_CONTINENTS);\n\n  if (loading || error) {\n    return <p>{error ? error.message : 'Loading...'}</p>;\n  }\n\n  return (\n    <div>\n      <h1>The best guide all around the world!</h1>\n      <ul>\n        {data.continents.map((continent: Continent) => (\n          <ContinentsList key={continent.code} continent={continent} />))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { client } from './api/api';\nimport { App } from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}