{"version":3,"sources":["api/api.ts","api/ContinentsContext.ts","components/LanguagesList/LanguagesList.tsx","components/CountriesList/CountriesList.tsx","components/ContinentsList/ContinetsList.tsx","App.tsx","index.tsx"],"names":["client","ApolloClient","cache","InMemoryCache","uri","GET_ALL_CONTINENTS","gql","ContinentsContext","React","createContext","handleClick","isContinent","setIsContinent","LanguagesList","props","language","useContext","className","type","name","onClick","CountriesList","country","useState","isCountry","setIsCountry","languages","map","code","ContinentsList","continent","value","setState","providerValue","Provider","countries","App","useQuery","loading","error","data","message","continents","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"qRAOaA,EAAS,IAAIC,IAAa,CACrCC,MAAO,IAAIC,IACXC,IAAK,uCAKMC,EAAqBC,YAAH,yL,gBCZlBC,EAAoBC,IAAMC,cAAuB,CAC5DC,YAAa,aACbC,aAAa,EACbC,eAAgB,kBAAM,K,OCEXC,EAAiC,SAACC,GAC7C,IAAQC,EAAaD,EAAbC,SACR,EAAwCC,qBAAWT,GAA3CI,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eAErB,OACE,oBAAIK,UAAU,2CAAd,SACE,wBACEA,UAAU,0BACVC,KAAK,SACLC,KAAK,YACLC,QAAS,WACPR,GAAgBD,IALpB,SAQGI,EAASI,UCbLE,EAAiC,SAACP,GAC7C,IAAQQ,EAAYR,EAAZQ,QACR,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACQf,EAAgBM,qBAAWT,GAA3BG,YAER,OACE,qBAAIO,UAAU,2CAAd,UACE,wBACEA,UAAU,0BACVC,KAAK,SACLE,QAAS,WACPV,EAAYc,EAAWC,IAJ3B,SAOGH,EAAQH,OAEX,oBAAIF,UAAU,mBAAd,SACGO,GAAcF,EAAQI,UAAUC,KAAI,SAACZ,GAAD,OACnC,cAAC,EAAD,CAAmCA,SAAUA,GAAzBA,EAASa,eClB1BC,EAAkC,SAACf,GAC9C,IAAQgB,EAAchB,EAAdgB,UACR,EAAsCP,oBAAS,GAA/C,mBAAOZ,EAAP,KAAoBC,EAApB,KAEMF,EAAc,SAACqB,EACnBC,GACAA,GAAUD,IAGNE,EAAgB,CACpBvB,cACAC,cACAC,kBAGF,OACE,cAACL,EAAkB2B,SAAnB,CAA4BH,MAAOE,EAAnC,SACE,qBAAIhB,UAAU,2CAAd,UACE,wBACEA,UAAU,0BACVC,KAAK,SACLE,QAAS,WACPV,EAAYC,EAAaC,IAJ7B,SAOGkB,EAAUX,OAGb,oBAAIF,UAAU,mBAAd,SACGN,GACCmB,EAAUK,UAAUR,KAAI,SAACL,GAAD,OACtB,cAAC,EAAD,CAAkCA,QAASA,GAAvBA,EAAQM,iBChC7BQ,G,YAAgB,WAC3B,MAAiCC,YAAShC,GAAlCiC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,OAAIF,GAAWC,EACN,4BAAIA,EAAQA,EAAME,QAAU,eAInC,sBAAKxB,UAAU,qFAAf,UACE,oBAAIA,UAAU,oCAAd,uCACA,oBAAIA,UAAU,mBAAd,SACGuB,EAAKE,WAAWf,KAAI,SAACG,GAAD,OACnB,cAAC,EAAD,CAEEA,UAAWA,GADNA,EAAUF,gB,MCb3Be,IAASC,OACP,cAACC,EAAA,EAAD,CAAgB7C,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEF8C,SAASC,eAAe,W","file":"static/js/main.41f55c5f.chunk.js","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n} from '@apollo/client';\n\n// initialize a GraphQL endpoint\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com',\n});\n\n// write a Apollo Query\n\nexport const GET_ALL_CONTINENTS = gql`\nquery {\n  continents {\n    code\n    name\n    countries {\n      code\n      name\n      languages {\n        code\n        name\n      }\n    }\n  }\n}\n`;\n","import React from 'react';\n\nexport const ContinentsContext = React.createContext<Context>({\n  handleClick: () => {},\n  isContinent: false,\n  setIsContinent: () => false,\n});\n","import React, { useContext } from 'react';\nimport { ContinentsContext } from '../../api/ContinentsContext';\n\ninterface Props {\n  language: Language;\n}\n\nexport const LanguagesList: React.FC<Props> = (props) => {\n  const { language } = props;\n  const { isContinent, setIsContinent } = useContext(ContinentsContext);\n\n  return (\n    <li className=\"list-group-item d-flex align-items-start\">\n      <button\n        className=\"btn btn-outline-primary\"\n        type=\"button\"\n        name=\"lastChild\"\n        onClick={() => {\n          setIsContinent(!isContinent);\n        }}\n      >\n        {language.name}\n      </button>\n    </li>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { LanguagesList } from '../LanguagesList';\nimport { ContinentsContext } from '../../api/ContinentsContext';\n\ninterface Props {\n  country: Country\n}\n\nexport const CountriesList: React.FC<Props> = (props) => {\n  const { country } = props;\n  const [isCountry, setIsCountry] = useState(false);\n  const { handleClick } = useContext(ContinentsContext);\n\n  return (\n    <li className=\"list-group-item d-flex align-items-start\">\n      <button\n        className=\"btn btn-outline-primary\"\n        type=\"button\"\n        onClick={() => {\n          handleClick(isCountry, setIsCountry);\n        }}\n      >\n        {country.name}\n      </button>\n      <ul className=\"list-group-flush\">\n        {isCountry && (country.languages.map((language: Language) => (\n          <LanguagesList key={language.code} language={language} />\n        ))\n        )}\n      </ul>\n    </li>\n  );\n};\n","import React, { useState } from 'react';\nimport { CountriesList } from '../CountriesList/CountriesList';\nimport { ContinentsContext } from '../../api/ContinentsContext';\n\ninterface Props {\n  continent: Continent\n}\n\nexport const ContinentsList: React.FC<Props> = (props) => {\n  const { continent } = props;\n  const [isContinent, setIsContinent] = useState(false);\n\n  const handleClick = (value: boolean,\n    setState: (a: boolean) => void) => {\n    setState(!value);\n  };\n\n  const providerValue = {\n    handleClick,\n    isContinent,\n    setIsContinent,\n  };\n\n  return (\n    <ContinentsContext.Provider value={providerValue}>\n      <li className=\"list-group-item d-flex align-items-start\">\n        <button\n          className=\"btn btn-outline-primary\"\n          type=\"button\"\n          onClick={() => {\n            handleClick(isContinent, setIsContinent);\n          }}\n        >\n          {continent.name}\n        </button>\n\n        <ul className=\"list-group-flush\">\n          {isContinent && (\n            continent.countries.map((country: Country) => (\n              <CountriesList key={country.code} country={country} />\n            ))\n          )}\n        </ul>\n      </li>\n    </ContinentsContext.Provider>\n  );\n};\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_CONTINENTS } from './api/api';\nimport { ContinentsList } from './components/ContinentsList';\nimport 'bootstrap/scss/bootstrap.scss';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const { loading, error, data } = useQuery(GET_ALL_CONTINENTS);\n\n  if (loading || error) {\n    return <p>{error ? error.message : 'Loading...'}</p>;\n  }\n\n  return (\n    <div className=\"container-sm mx-auto d-flex-column align-content-center justify-content-center p-2\">\n      <h1 className=\"d-block text-center text-primaryg\">7 Continents of the World</h1>\n      <ul className=\"list-group-flush\">\n        {data.continents.map((continent: Continent) => (\n          <ContinentsList\n            key={continent.code}\n            continent={continent}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { client } from './api/api';\nimport { App } from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}